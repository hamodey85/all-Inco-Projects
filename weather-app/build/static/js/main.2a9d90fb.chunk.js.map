{"version":3,"sources":["components/Form/form.component.jsx","components/Heading/heading.component.jsx","components/Weather/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","data","city","country","className","onSubmit","getWeather","onChange","changeHandler","type","name","placeholder","value","Heading","Weather","termpriture","description","error","App","e","setState","input","target","a","preventDefault","elements","fetch","apiCall","json","cod","sys","main","temp","weather","message","bind","state","humidity","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"oTAaeA,G,MAXF,SAACC,GAAU,IAAD,EACGA,EAAMC,KAAvBC,EADc,EACdA,KAAMC,EADQ,EACRA,QACb,OACE,0BAAMC,UAAU,OAAOC,SAAUL,EAAMM,WAAYC,SAAUP,EAAMQ,eAC/D,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,UAAWC,MAAOV,IAC7D,2BAAOO,KAAK,OAAOC,KAAK,UAAUC,YAAY,cAAcC,MAAOT,IACnE,kDCEOU,EARC,WACd,OACE,yBAAKT,UAAU,WACX,gDCsBOU,EAzBC,SAACd,GAAU,IAAD,EAC6BA,EAAMC,KAApDC,EADiB,EACjBA,KAAKC,EADY,EACZA,QAAQY,EADI,EACJA,YAAYC,EADR,EACQA,YAAYC,EADpB,EACoBA,MAqB5C,OAlBOA,EACH,yBAAKb,UAAU,WACb,4BAAI,uCAAmBF,GACvB,4BAAI,0CAAsBC,GAC1B,4BAAI,wCAAoBc,IAIxB,yBAAKb,UAAU,WACb,4BAAI,uCAAmBF,GACvB,4BAAI,0CAAsBC,GAC1B,4BAAI,8CAA0BY,GAC9B,4BAAI,8CAA0BC,KCuDzBE,E,kDAhEb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAYRQ,cAAgB,SAACW,GACf,EAAKC,SAAS,CACZC,MAAM,eAAEF,EAAEG,OAAOZ,KAAMS,EAAEG,OAAOV,UAfjB,EAmBlBN,WAnBkB,uCAmBL,WAAOa,GAAP,qBAAAI,EAAA,6DACZJ,EAAEK,iBACItB,EAAOiB,EAAEG,OAAOG,SAASvB,KAAKU,MAC9BT,EAAUgB,EAAEG,OAAOG,SAAStB,QAAQS,MAH9B,SAIUc,MAAM,qDAAD,OAAsDxB,EAAtD,YAA8DC,EAA9D,kBA3BnB,mCA2BmB,kBAJf,cAINwB,EAJM,gBAKKA,EAAQC,OALb,OAOI,SAFV3B,EALM,QAOJ4B,IAEN,EAAKT,SAAS,CACZC,MAAM,CAACnB,KAAK,GAAGC,QAAQ,IACvBD,KAAMD,EAAKS,KACXP,QAASF,EAAK6B,IAAI3B,QAClBY,YAAYd,EAAK8B,KAAKC,KACtBhB,YAAaf,EAAKgC,QAAQ,GAAGjB,YAC7BC,OAAO,IAIT,EAAKG,SAAS,CACZC,MAAM,CAACnB,KAAK,GAAGC,QAAQ,IACvBD,KAAKA,GAAS,QACdC,QAAQA,GAAY,QACpBY,YAAY,KACZC,YAAa,KACbC,MAAOhB,EAAKiC,UAzBJ,4CAnBK,sDAEjB,EAAK5B,WAAW6B,KAAhB,gBACA,EAAKC,MAAQ,CACXf,MAAM,CAACnB,KAAK,GAAIC,QAAQ,IACxBD,KAAM,GACNC,QAAS,GACTY,YAAa,KACbsB,SAAU,KACVrB,YAAa,KACbC,OAAO,GAVQ,E,qDAsDjB,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAME,WAAYgC,KAAKhC,WAAYL,KAAMqC,KAAKF,MAAMf,MAAOb,cAAe8B,KAAK9B,gBAC/E,kBAAC,EAAD,CAASP,KAAMqC,KAAKF,a,GA3DVG,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAMiB,c","file":"static/js/main.2a9d90fb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) =>{\r\n  const {city, country} = props.data\r\n  return (\r\n    <form className=\"form\" onSubmit={props.getWeather} onChange={props.changeHandler}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"  value={city}/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country ...\" value={country}/>\r\n        <button>Get Weather</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Heading = () =>{\r\n  return (\r\n    <div className=\"heading\">\r\n        <h1>Weather Finder</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Heading;\r\n","import React from 'react';\r\n\r\nconst Weather = (props) =>{\r\n  const {city,country,termpriture,description,error} = props.data\r\n  const ifError = ()=>  {\r\n\r\n      if(error) return (\r\n      <div className=\"heading\">\r\n        <h3><span>City:</span>{city}</h3>\r\n        <h3><span>Country:</span>{country}</h3>\r\n        <h3><span>error:</span>{error}</h3>\r\n      </div>\r\n      )\r\n      return(\r\n        <div className=\"heading\">\r\n          <h3><span>City:</span>{city}</h3>\r\n          <h3><span>Country:</span>{country}</h3>\r\n          <h3><span>Termpriture:</span>{termpriture}</h3>\r\n          <h3><span>Description:</span>{description}</h3>\r\n        </div>\r\n      )\r\n\r\n  }\r\n\r\n  return ifError();\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport './App.css';\nimport Form from './components/Form/form.component'\nimport Heading from './components/Heading/heading.component'\nimport Weather from './components/Weather/weather.component'\nconst key = 'ba0e541ca7cdbba97ebb83e58d0366c7'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getWeather.bind(this)\n    this.state = {\n      input:{city:'', country:''},\n      city: '',\n      country: '',\n      termpriture: null,\n      humidity: null,\n      description: null,\n      error: false,\n    }\n  }\n  changeHandler = (e) => {\n    this.setState({\n      input:{[e.target.name]:e.target.value}\n    })\n  }\n\n   getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${key}&units=metric`)\n    const data=await apiCall.json()\n\n    if(data.cod !== \"404\"){\n\n      this.setState({\n        input:{city:'',country:''},\n        city: data.name,\n        country: data.sys.country,\n        termpriture:data.main.temp,\n        description: data.weather[0].description,\n        error: false\n\n      })\n    }else{\n      this.setState({\n        input:{city:'',country:''},\n        city:city  || \"empty\",\n        country:country  || \"empty\",\n        termpriture:null,\n        description: null,\n        error: data.message\n      })\n\n    }\n\n  }\n\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <Heading/>\n        <Form getWeather={this.getWeather} data={this.state.input} changeHandler={this.changeHandler}/>\n        <Weather data={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}